securityDefinitions:
  jwt:
    type: apiKey
    name: authorization
    in: header

tags:
  - name: auth
    description: Authentication API
  - name: events
    description: Events API
  - name: tickets
    description: Tickets API
  - name: waitingLists
    description: WaitingLists API

paths:
  # [POST] events
  /events/initialize:
    post:
      tags:
        - events
      summary: Initialize Event
      security:
        - jwt: []
      parameters:
        - name: body
          in: body
          description: Event Data
          required: true
          schema:
            $ref: '#/definitions/events'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /auth/signup:
    post:
      tags:
        - auth
      summary: Sign Up
      parameters:
        - name: body
          in: body
          description: User Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      parameters:
        - name: body
          in: body
          description: User Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /waitinglists/join-waitlist:
    post:
      tags:
        - waitingLists
      summary: Join waiting list
      security:
        - jwt: []
      parameters:
        - name: body
          in: body
          description: Waiting list Data
          required: true
          schema:
            $ref: '#/definitions/waitinglists'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] status/id
  /events/status/{event_id}:
    get:
      tags:
        - events
      summary: Get event status
      security:
        - jwt: []
      parameters:
        - name: event_id
          in: path
          description: Event Id
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'

  /waitinglists:
    get:
      tags:
        - waitingLists
      summary: View waiting list
      security:
        - jwt: []
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

  /tickets/available-tickets/{event_id}:
    get:
      tags:
        - tickets
      summary: Get available tickets for an event
      security:
        - jwt: []
      parameters:
        - name: event_id
          in: path
          description: Event Id
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'

  /tickets/book:
    post:
      tags:
        - tickets
      summary: Book ticket for event
      security:
        - jwt: []
      parameters:
        - name: body
          in: body
          description: Book ticket for event
          required: true
          schema:
            $ref: '#/definitions/tickets'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /tickets/cancel:
    post:
      tags:
        - tickets
      summary: Cancel ticket booking for an event
      security:
        - jwt: []
      parameters:
        - name: body
          in: body
          description: Cancel ticket booking for an event
          required: true
          schema:
            type: object
            required:
              - user_id
              - event_id
            properties:
              user_id:
                type: number
                description: User Id
              event_id:
                type: number
                description: Event Id
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# definitions
definitions:
  events:
    type: object
    required:
      - event_name
      - total_tickets
      - available_tickets
      - status
    properties:
      event_name:
        type: string
        description: Name of event
      total_tickets:
        type: number
        description: Total tickets for event
      available_tickets:
        type: number
        description: Available tickets for event
      status:
        type: string
        description: Event status. Active or cancelled

  tickets:
    type: object
    required:
      - user_id
      - event_id
      - quantity
    properties:
      user_id:
        type: number
        description: User Id
      event_id:
        type: number
        description: Event Id
      quantity:
        type: number
        description: Number of tickets
      additionalUsers:
        type: array
        items:
          type: number
        description: Array of additional user IDs to purchase tickets for

  waitingLists:
    type: object
    required:
      - user_id
      - event_id
    properties:
      user_id:
        type: number
        description: User Id
      event_id:
        type: number
        description: Event Id

  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: User email
      password:
        type: string
        description: User password

schemes:
  - https
  - http
